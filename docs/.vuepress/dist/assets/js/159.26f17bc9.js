(window.webpackJsonp=window.webpackJsonp||[]).push([[159],{546:function(s,e,n){"use strict";n.r(e);var a=n(45),t=Object(a.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"js-异步编程及常考面试题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js-异步编程及常考面试题"}},[s._v("#")]),s._v(" JS 异步编程及常考面试题")]),s._v(" "),n("p",[s._v("在上一章节中我们了解了常见 ES6 语法的一些知识点。这一章节我们将会学习异步编程这一块的内容，鉴于异步编程是 JS 中至关重要的内容，所以我们将会用三个章节来学习异步编程涉及到的重点和难点，同时这一块内容也是面试常考范围，希望大家认真学习。")]),s._v(" "),n("h2",{attrs:{id:"并发-concurrency-和并行-parallelism-区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#并发-concurrency-和并行-parallelism-区别"}},[s._v("#")]),s._v(" 并发（concurrency）和并行（parallelism）区别")]),s._v(" "),n("blockquote",[n("p",[s._v("涉及面试题：并发与并行的区别？")])]),s._v(" "),n("p",[s._v("异步和这小节的知识点其实并不是一个概念，但是这两个名词确实是很多人都常会混淆的知识点。其实混淆的原因可能只是两个名词在中文上的相似，在英文上来说完全是不同的单词。")]),s._v(" "),n("p",[s._v("并发是宏观概念，我分别有任务 A 和任务 B，在一段时间内通过任务间的切换完成了这两个任务，这种情况就可以称之为并发。")]),s._v(" "),n("p",[s._v("并行是微观概念，假设 CPU 中存在两个核心，那么我就可以同时完成任务 A、B。同时完成多个任务的情况就可以称之为并行。")]),s._v(" "),n("h2",{attrs:{id:"回调函数-callback"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#回调函数-callback"}},[s._v("#")]),s._v(" 回调函数（Callback）")]),s._v(" "),n("blockquote",[n("p",[s._v("涉及面试题：什么是回调函数？回调函数有什么缺点？如何解决回调地狱问题？")])]),s._v(" "),n("p",[s._v("回调函数应该是大家经常使用到的，以下代码就是一个回调函数的例子：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("ajax(url, () => {\n    // 处理逻辑\n})\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("但是回调函数有一个致命的弱点，就是容易写出回调地狱（Callback hell）。假设多个请求存在依赖性，你可能就会写出如下代码：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("ajax(url, () => {\n    // 处理逻辑\n    ajax(url1, () => {\n        // 处理逻辑\n        ajax(url2, () => {\n            // 处理逻辑\n        })\n    })\n})\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("以上代码看起来不利于阅读和维护，当然，你可能会想说解决这个问题还不简单，把函数分开来写不就得了")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function firstAjax() {\n  ajax(url1, () => {\n    // 处理逻辑\n    secondAjax()\n  })\n}\nfunction secondAjax() {\n  ajax(url2, () => {\n    // 处理逻辑\n  })\n}\najax(url, () => {\n  // 处理逻辑\n  firstAjax()\n})\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("以上的代码虽然看上去利于阅读了，但是还是没有解决根本问题。")]),s._v(" "),n("p",[s._v("回调地狱的根本问题就是：")]),s._v(" "),n("ol",[n("li",[s._v("嵌套函数存在耦合性，一旦有所改动，就会牵一发而动全身")]),s._v(" "),n("li",[s._v("嵌套函数一多，就很难处理错误")])]),s._v(" "),n("p",[s._v("当然，回调函数还存在着别的几个缺点，比如不能使用 "),n("code",[s._v("try catch")]),s._v(" 捕获错误，不能直接 "),n("code",[s._v("return")]),s._v("。在接下来的几小节中，我们将来学习通过别的技术解决这些问题。")]),s._v(" "),n("h2",{attrs:{id:"generator"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#generator"}},[s._v("#")]),s._v(" Generator")]),s._v(" "),n("blockquote",[n("p",[s._v("涉及面试题：你理解的 Generator 是什么？")])]),s._v(" "),n("p",[n("code",[s._v("Generator")]),s._v(" 算是 ES6 中难理解的概念之一了，"),n("code",[s._v("Generator")]),s._v(" 最大的特点就是可以控制函数的执行。在这一小节中我们不会去讲什么是 "),n("code",[s._v("Generator")]),s._v("，而是把重点放在 "),n("code",[s._v("Generator")]),s._v(" 的一些容易困惑的地方。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function *foo(x) {\n  let y = 2 * (yield (x + 1))\n  let z = yield (y / 3)\n  return (x + y + z)\n}\nlet it = foo(5)\nconsole.log(it.next())   // => {value: 6, done: false}\nconsole.log(it.next(12)) // => {value: 8, done: false}\nconsole.log(it.next(13)) // => {value: 42, done: true}\n\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("你也许会疑惑为什么会产生与你预想不同的值，接下来就让我为你逐行代码分析原因")]),s._v(" "),n("ul",[n("li",[s._v("首先 "),n("code",[s._v("Generator")]),s._v(" 函数调用和普通函数不同，它会返回一个迭代器")]),s._v(" "),n("li",[s._v("当执行第一次 "),n("code",[s._v("next")]),s._v(" 时，传参会被忽略，并且函数暂停在 "),n("code",[s._v("yield (x + 1)")]),s._v(" 处，所以返回 "),n("code",[s._v("5 + 1 = 6")])]),s._v(" "),n("li",[s._v("当执行第二次 "),n("code",[s._v("next")]),s._v(" 时，传入的参数等于上一个 "),n("code",[s._v("yield")]),s._v(" 的返回值，如果你不传参，"),n("code",[s._v("yield")]),s._v(" 永远返回 "),n("code",[s._v("undefined")]),s._v("。此时 "),n("code",[s._v("let y = 2 * 12")]),s._v("，所以第二个 "),n("code",[s._v("yield")]),s._v(" 等于 "),n("code",[s._v("2 * 12 / 3 = 8")])]),s._v(" "),n("li",[s._v("当执行第三次 "),n("code",[s._v("next")]),s._v(" 时，传入的参数会传递给 "),n("code",[s._v("z")]),s._v("，所以 "),n("code",[s._v("z = 13, x = 5, y = 24")]),s._v("，相加等于 "),n("code",[s._v("42")])])]),s._v(" "),n("p",[n("code",[s._v("Generator")]),s._v(" 函数一般见到的不多，其实也于他有点绕有关系，并且一般会配合 co 库去使用。当然，我们可以通过 "),n("code",[s._v("Generator")]),s._v(" 函数解决回调地狱的问题，可以把之前的回调地狱例子改写为如下代码：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function *fetch() {\n    yield ajax(url, () => {})\n    yield ajax(url1, () => {})\n    yield ajax(url2, () => {})\n}\nlet it = fetch()\nlet result1 = it.next()\nlet result2 = it.next()\nlet result3 = it.next()\n\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h2",{attrs:{id:"promise"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[s._v("#")]),s._v(" Promise")]),s._v(" "),n("blockquote",[n("p",[s._v("涉及面试题：Promise 的特点是什么，分别有什么优缺点？什么是 Promise 链？Promise 构造函数执行和 then 函数执行有什么区别？")])]),s._v(" "),n("p",[n("code",[s._v("Promise")]),s._v(" 翻译过来就是承诺的意思，这个承诺会在未来有一个确切的答复，并且该承诺有三种状态，分别是：")]),s._v(" "),n("ol",[n("li",[s._v("等待中（pending）")]),s._v(" "),n("li",[s._v("完成了 （resolved）")]),s._v(" "),n("li",[s._v("拒绝了（rejected）")])]),s._v(" "),n("p",[s._v("这个承诺一旦从等待状态变成为其他状态就永远不能更改状态了，也就是说一旦状态变为 resolved 后，就不能再次改变")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("new Promise((resolve, reject) => {\n  resolve('success')\n  // 无效\n  reject('reject')\n})\n\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("当我们在构造 "),n("code",[s._v("Promise")]),s._v(" 的时候，构造函数内部的代码是立即执行的")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("new Promise((resolve, reject) => {\n  console.log('new Promise')\n  resolve('success')\n})\nconsole.log('finifsh')\n// new Promise -> finifsh\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[n("code",[s._v("Promise")]),s._v(" 实现了链式调用，也就是说每次调用 "),n("code",[s._v("then")]),s._v(" 之后返回的都是一个 "),n("code",[s._v("Promise")]),s._v("，并且是一个全新的 "),n("code",[s._v("Promise")]),s._v("，原因也是因为状态不可变。如果你在 "),n("code",[s._v("then")]),s._v(" 中 使用了 "),n("code",[s._v("return")]),s._v("，那么 "),n("code",[s._v("return")]),s._v(" 的值会被 "),n("code",[s._v("Promise.resolve()")]),s._v(" 包装")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Promise.resolve(1)\n  .then(res => {\n    console.log(res) // => 1\n    return 2 // 包装成 Promise.resolve(2)\n  })\n  .then(res => {\n    console.log(res) // => 2\n  })\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("当然了，"),n("code",[s._v("Promise")]),s._v(" 也很好地解决了回调地狱的问题，可以把之前的回调地狱例子改写为如下代码：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("ajax(url)\n  .then(res => {\n      console.log(res)\n      return ajax(url1)\n  }).then(res => {\n      console.log(res)\n      return ajax(url2)\n  }).then(res => console.log(res))\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("前面都是在讲述 "),n("code",[s._v("Promise")]),s._v(" 的一些优点和特点，其实它也是存在一些缺点的，比如无法取消 "),n("code",[s._v("Promise")]),s._v("，错误需要通过回调函数捕获。")]),s._v(" "),n("h2",{attrs:{id:"async-及-await"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#async-及-await"}},[s._v("#")]),s._v(" async 及 await")]),s._v(" "),n("blockquote",[n("p",[s._v("涉及面试题：async 及 await 的特点，它们的优点和缺点分别是什么？await 原理是什么？")])]),s._v(" "),n("p",[s._v("一个函数如果加上 "),n("code",[s._v("async")]),s._v(" ，那么该函数就会返回一个 "),n("code",[s._v("Promise")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('async function test() {\n  return "1"\n}\nconsole.log(test()) // -> Promise {<resolved>: "1"}\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("code",[s._v("async")]),s._v(" 就是将函数返回值使用 "),n("code",[s._v("Promise.resolve()")]),s._v(" 包裹了下，和 "),n("code",[s._v("then")]),s._v(" 中处理返回值一样，并且 "),n("code",[s._v("await")]),s._v(" 只能配套 "),n("code",[s._v("async")]),s._v(" 使用")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("async function test() {\n  let value = await sleep()\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("code",[s._v("async")]),s._v(" 和 "),n("code",[s._v("await")]),s._v(" 可以说是异步终极解决方案了，相比直接使用 "),n("code",[s._v("Promise")]),s._v(" 来说，优势在于处理 "),n("code",[s._v("then")]),s._v(" 的调用链，能够更清晰准确的写出代码，毕竟写一大堆 "),n("code",[s._v("then")]),s._v(" 也很恶心，并且也能优雅地解决回调地狱问题。当然也存在一些缺点，因为 "),n("code",[s._v("await")]),s._v(" 将异步代码改造成了同步代码，如果多个异步代码没有依赖性却使用了 "),n("code",[s._v("await")]),s._v(" 会导致性能上的降低。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("async function test() {\n  // 以下代码没有依赖性的话，完全可以使用 Promise.all 的方式\n  // 如果有依赖性的话，其实就是解决回调地狱的例子了\n  await fetch(url)\n  await fetch(url1)\n  await fetch(url2)\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("下面来看一个使用 "),n("code",[s._v("await")]),s._v(" 的例子：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let a = 0\nlet b = async () => {\n  a = a + await 10\n  console.log('2', a) // -> '2' 10\n}\nb()\na++\nconsole.log('1', a) // -> '1' 1\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("对于以上代码你可能会有疑惑，让我来解释下原因")]),s._v(" "),n("ul",[n("li",[s._v("首先函数 "),n("code",[s._v("b")]),s._v(" 先执行，在执行到 "),n("code",[s._v("await 10")]),s._v(" 之前变量 "),n("code",[s._v("a")]),s._v(" 还是 0，因为 "),n("code",[s._v("await")]),s._v(" 内部实现了 "),n("code",[s._v("generator")]),s._v(" ，"),n("code",[s._v("generator")]),s._v(" 会保留堆栈中东西，所以这时候 "),n("code",[s._v("a = 0")]),s._v(" 被保存了下来")]),s._v(" "),n("li",[s._v("因为 "),n("code",[s._v("await")]),s._v(" 是异步操作，后来的表达式不返回 "),n("code",[s._v("Promise")]),s._v(" 的话，就会包装成 "),n("code",[s._v("Promise.reslove(返回值)")]),s._v("，然后会去执行函数外的同步代码")]),s._v(" "),n("li",[s._v("同步代码执行完毕后开始执行异步代码，将保存下来的值拿出来使用，这时候 "),n("code",[s._v("a = 0 + 10")])])]),s._v(" "),n("p",[s._v("上述解释中提到了 "),n("code",[s._v("await")]),s._v(" 内部实现了 "),n("code",[s._v("generator")]),s._v("，其实 "),n("code",[s._v("await")]),s._v(" 就是 "),n("code",[s._v("generator")]),s._v(" 加上 "),n("code",[s._v("Promise")]),s._v(" 的语法糖，且内部实现了自动执行 "),n("code",[s._v("generator")]),s._v("。如果你熟悉 co 的话，其实自己就可以实现这样的语法糖。")]),s._v(" "),n("h2",{attrs:{id:"常用定时器函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用定时器函数"}},[s._v("#")]),s._v(" 常用定时器函数")]),s._v(" "),n("blockquote",[n("p",[s._v("涉及面试题：setTimeout、setInterval、requestAnimationFrame 各有什么特点？")])]),s._v(" "),n("p",[s._v("异步编程当然少不了定时器了，常见的定时器函数有 "),n("code",[s._v("setTimeout")]),s._v("、"),n("code",[s._v("setInterval")]),s._v("、"),n("code",[s._v("requestAnimationFrame")]),s._v("。我们先来讲讲最常用的"),n("code",[s._v("setTimeout")]),s._v("，很多人认为 "),n("code",[s._v("setTimeout")]),s._v(" 是延时多久，那就应该是多久后执行。")]),s._v(" "),n("p",[s._v("其实这个观点是错误的，因为 JS 是单线程执行的，如果前面的代码影响了性能，就会导致 "),n("code",[s._v("setTimeout")]),s._v(" 不会按期执行。当然了，我们可以通过代码去修正 "),n("code",[s._v("setTimeout")]),s._v("，从而使定时器相对准确")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let period = 60 * 1000 * 60 * 2\nlet startTime = new Date().getTime()\nlet count = 0\nlet end = new Date().getTime() + period\nlet interval = 1000\nlet currentInterval = interval\n\nfunction loop() {\n  count++\n  // 代码执行所消耗的时间\n  let offset = new Date().getTime() - (startTime + count * interval);\n  let diff = end - new Date().getTime()\n  let h = Math.floor(diff / (60 * 1000 * 60))\n  let hdiff = diff % (60 * 1000 * 60)\n  let m = Math.floor(hdiff / (60 * 1000))\n  let mdiff = hdiff % (60 * 1000)\n  let s = mdiff / (1000)\n  let sCeil = Math.ceil(s)\n  let sFloor = Math.floor(s)\n  // 得到下一次循环所消耗的时间\n  currentInterval = interval - offset \n  console.log('时：'+h, '分：'+m, '毫秒：'+s, '秒向上取整：'+sCeil, '代码执行时间：'+offset, '下次循环间隔'+currentInterval) \n\n  setTimeout(loop, currentInterval)\n}\n\nsetTimeout(loop, currentInterval)\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br")])]),n("p",[s._v("接下来我们来看 "),n("code",[s._v("setInterval")]),s._v("，其实这个函数作用和 "),n("code",[s._v("setTimeout")]),s._v(" 基本一致，只是该函数是每隔一段时间执行一次回调函数。")]),s._v(" "),n("p",[s._v("通常来说不建议使用 "),n("code",[s._v("setInterval")]),s._v("。第一，它和 "),n("code",[s._v("setTimeout")]),s._v(" 一样，不能保证在预期的时间执行任务。第二，它存在执行累积的问题，请看以下伪代码")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function demo() {\n  setInterval(function(){\n    console.log(2)\n  },1000)\n  sleep(2000)\n}\ndemo()\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("以上代码在浏览器环境中，如果定时器执行过程中出现了耗时操作，多个回调函数会在耗时操作结束以后同时执行，这样可能就会带来性能上的问题。")]),s._v(" "),n("p",[s._v("如果你有循环定时器的需求，其实完全可以通过 "),n("code",[s._v("requestAnimationFrame")]),s._v(" 来实现")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function setInterval(callback, interval) {\n  let timer\n  const now = Date.now\n  let startTime = now()\n  let endTime = startTime\n  const loop = () => {\n    timer = window.requestAnimationFrame(loop)\n    endTime = now()\n    if (endTime - startTime >= interval) {\n      startTime = endTime = now()\n      callback(timer)\n    }\n  }\n  timer = window.requestAnimationFrame(loop)\n  return timer\n}\n\nlet a = 0\nsetInterval(timer => {\n  console.log(1)\n  a++\n  if (a === 3) cancelAnimationFrame(timer)\n}, 1000)\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("p",[s._v("首先 "),n("code",[s._v("requestAnimationFrame")]),s._v(" 自带函数节流功能，基本可以保证在 16.6 毫秒内只执行一次（不掉帧的情况下），并且该函数的延时效果是精确的，没有其他定时器时间不准的问题，当然你也可以通过该函数来实现 "),n("code",[s._v("setTimeout")]),s._v("。")]),s._v(" "),n("h2",{attrs:{id:"小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),n("p",[s._v("异步编程是 JS 中较难掌握的内容，同时也是很重要的知识点。以上提到的每个知识点其实都可以作为一道面试题，希望大家可以好好掌握以上内容如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。")])])}),[],!1,null,null,null);e.default=t.exports}}]);